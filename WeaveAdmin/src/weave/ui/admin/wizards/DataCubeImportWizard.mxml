<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*" 
			label="Import data cube"
			width="640" height="300"
			creationComplete="handleCreationComplete()"
			>
	<!--<mx:Label fontWeight="bold" text="Add existing SQL data to a DataTable entry in SQLConfig.xml"/>-->
	<mx:VBox id="selectTablePage">
		<mx:Label text="This wizard process allows you to add metadata to existing Weave data tables which adds them to the Universal Data Cube. To begin, select an existing table from the following list:"/>
		<ui:TreeWithSearch id="treeWithSearch" prompt="Search data tables" click="handleTableSelectionChange()"/>
	</mx:VBox>
	<mx:ViewStack id="selectDimensionOrMeasureColumnPage">
		<mx:VBox id="loadingTableMetadata">
			<mx:Label text="Loading column list..."/>
		</mx:VBox>
		<mx:VBox id="loadedTableMetadata">
			<mx:Label text="Loaded table metadata."/>
		</mx:VBox>
	</mx:ViewStack>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			
			import weave.services.AdminInterface;
			import weave.services.WeaveAdminService;
			import weave.services.beans.AttributeColumnInfo;
			
			//variables used by multiple states:
			
			// the metadata entries for each column in the selected table:
			private var metadataArray:Array = new Array();
			// the current column in the currently selected table
			//var currentColumn TODO assign this variable and find out type
			// the data set that this cube is being added to
			//var dataSet
			
			// This function gets called when the "Next" button is clicked.
			override public function next():void
			{
				if(selectedChild == selectTablePage)
					nextForSelectTablePage();
			}
			
			/*Begin code for selectTablePage*/
			private function handleTableSelectionChange():void
			{
				//enable "Next" button
				nextEnabled = true;
			}
			
			// This function gets called when the "Next" button is clicked,
			// and the wizard state is 'selectTablePage'
			private function nextForSelectTablePage():void
			{
				//show the poor man's "progress indicator" while column list is loading
				selectDimensionOrMeasureColumnPage.selectedChild = loadingTableMetadata;
				selectedChild = selectDimensionOrMeasureColumnPage;
				
				//load the data, the display will change when it is loaded
				var tableName:String = treeWithSearch.tree.selectedItem.label;
				AdminInterface.instance.getDataTableInfo(tableName).addAsyncResponder(handleDataTableInfo, null, tableName);
			}
			
			private function handleDataTableInfo(event:ResultEvent, token:Object = null):void
			{
				metadataArray = new Array();
				var result:Array = event.result as Array;
				if( result != null )
				{
					for( var i:int = 0; i < result.length; i++ )
					{
						var item:AttributeColumnInfo = new AttributeColumnInfo(result[i]);
						item.metadata.connection = item.connection;
						item.metadata.sqlQuery = item.sqlQuery;
						metadataArray.push(item.metadata);
					}
				}
				else
				{
					var tableName:String = token as String;
					WeaveAdminService.messageDisplay("Error","Data table not found" + tableName, true);
					//Alert.show("Data table not found " + tableName, "Error");
				}
				selectDimensionOrMeasureColumnPage.selectedChild = loadedTableMetadata;
				
			}
			
			/*End code for selectTablePage*/
			
			/*Begin code for selectDimensionOrMeasureColumnPage*/
			
			/*End code for selectDimensionOrMeasureColumnPage*/
			
			private function handleCreationComplete():void
			{
				//disable all buttons for the first page seen
				backEnabled = false;
				nextEnabled = false;
				finishEnabled = false;
				
				//initialize the list of tables in the first page seen
				treeWithSearch.generateFlatTreeFromLabels(AdminInterface.instance.dataTableNames);
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
