<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This is a GUI for SessionStateLog undo and redo.

	@author adufilie
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns="weave.editors.*"
		 width="100%" horizontalGap="{padding}" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}"
		 implements="weave.api.ui.ILinkableObjectEditor">
	<mx:Button visible="{devMode}" includeInLayout="{devMode}" width="24" toolTip="Load session history from a file" icon="@Embed(source='/weave/resources/images/folder.png')" click="load()"/> 
	<mx:Button visible="{devMode}" includeInLayout="{devMode}" width="24" toolTip="Save session history to a file" icon="@Embed(source='/weave/resources/images/floppy.png')" click="save()"/>
	<mx:Button width="44" id="recordButton" toggle="true" icon="{recordButton.selected ? icon_historyRecordOn : icon_historyRecordOff}"
			   click="_stateLog.enableLogging.value = recordButton.selected;"
			   toolTip="Session history recording is {recordButton.selected ? 'enabled' : 'disabled'}."/>
	<mx:Button width="24" id="undoButton" click="_stateLog.undo();" toolTip="Undo" icon="@Embed(source='/weave/resources/images/history-undo.png')"/>
	<mx:Button width="24" id="redoButton" click="_stateLog.redo();" toolTip="Redo" icon="@Embed(source='/weave/resources/images/history-redo.png')"/>
	<mx:HSlider id="slider" width="100%" showDataTip="false" liveDragging="true" tickInterval="1" snapInterval="1" minimum="0" change="handleSlider();"/>
	<mx:Button styleName="button" label="Clear" click="_stateLog.clearHistory();" toolTip="Clear session history"/>
	<mx:Style>
		.button {
			paddingLeft: 4;
			paddingRight: 4;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.core.SessionStateLog;
			import weave.ui.ExportSessionStatePanel;
			
			private const padding:Number = 4;
			
			public static const devMode:Boolean = true;
			
			private var _stateLog:SessionStateLog = null; // this is the object we are editing

			[Embed(source='/weave/resources/images/history-record-on.png')]
			private static const icon_historyRecordOn:Class;
			[Embed(source='/weave/resources/images/history-record-off.png')]
			private static const icon_historyRecordOff:Class;

			
			/**
			 * @inheritDoc
			 */
			public function setTarget(object:ILinkableObject):void
			{
				if (_stateLog)
					getCallbackCollection(_stateLog).removeCallback(handleStateLogChange);
				
				_stateLog = object as SessionStateLog;
				
				if (_stateLog)
					getCallbackCollection(_stateLog).addImmediateCallback(this, handleStateLogChange, null, true);
			}
			
			/**
			 * @inheritDoc
			 */
			public function applyChanges():void
			{
				// do nothing because changes are applied immediately.
			}
			
			// called when slider value changes
			private function handleSlider():void
			{
				var delta:int = slider.value - _stateLog.undoHistory.length;
				if (delta < 0)
					_stateLog.undo(-delta);
				else
					_stateLog.redo(delta);
			}
			
			// called when state log changes
			private function handleStateLogChange():void
			{
				if (!parent)
				{
					callLater(handleStateLogChange);
					return;
				}
				recordButton.selected = _stateLog.enableLogging.value;
				slider.maximum = _stateLog.undoHistory.length + _stateLog.redoHistory.length;
				slider.value = _stateLog.undoHistory.length;
				slider.enabled = slider.maximum > slider.minimum;
				undoButton.enabled = _stateLog.undoHistory.length > 0;
				redoButton.enabled = _stateLog.redoHistory.length > 0;
			}
			
			private var _weaveFileRef:FileReference = null;
			private function load():void
			{
				if (!_weaveFileRef)
				{
					_weaveFileRef = new FileReference();
					_weaveFileRef.addEventListener(Event.SELECT,   function (e:Event):void { _weaveFileRef.load(); } );
					_weaveFileRef.addEventListener(Event.COMPLETE, function (e:Event):void {
						// TEMPORARY SOLUTION
						Application.application.loadSessionState(e.target.data, _weaveFileRef.name);
					} );
				}
				_weaveFileRef.browse([new FileFilter("Weave file", "*.weave"), new FileFilter("Weave XML session state", "*.xml")]);
			}
			
			private function save():void
			{
				// TEMPORARY SOLUTION
				var exportSessionStatePanel:ExportSessionStatePanel = new ExportSessionStatePanel();
				exportSessionStatePanel = PopUpManager.createPopUp(this,ExportSessionStatePanel,false) as ExportSessionStatePanel;
				PopUpManager.centerPopUp(exportSessionStatePanel);
			}
		]]>
	</mx:Script>
</mx:HBox> 
