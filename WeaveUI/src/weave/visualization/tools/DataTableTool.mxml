<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
	
<!---
@author skolman
@author kmonico
@author sanbalag
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
	     xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
	     layout="absolute"
		 title="Data Table" xmlns:editors="weave.ui.editors.*"
		 >
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0">
		<mx:HBox id="topControls" horizontalAlign="left" width="100%">
			<mx:Label text="Key type:"/>
			<ui:CustomComboBox id="keyTypeCombo" change="keyTypeChangeEventHandler()" toolTip="Only columns of the selected key type will be shown."/>
			<mx:Button label="Edit columns..." click="AttributeSelectorPanel.openDefaultSelector(columns)"/>
		</mx:HBox>
	
		<ui:CustomDataGrid id="dataGrid"  
					 	horizontalScrollPolicy="off" verticalScrollPolicy="auto"
						 dataProvider="{dataRowKeys}" 
						 width="100%" height="100%"
						 allowMultipleSelection="true"
						 minWidth="0"
						 copy="handleDataCopy(event)" 
						 change="handleItemSelection(event)"
						 doubleClick="handleDoubleClick(event)" doubleClickEnabled="true"
						 headerShift="handleColumnReorder(event)"
						 headerRelease="handleHeaderRelease(event)"
						 paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
						 
						 fontWeight="normal"
						 alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
						 rollOverColor="0xDADAFF"
						 selectionColor="0xFFAAAA"
						 />
						 
		<mx:HBox id="bottomControls" width="100%" paddingTop="3" paddingLeft="3" paddingBottom="3" paddingRight="3">
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:Button click="moveSelectedToTop()" label="Move Selected Items to top"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Number id="columnWidthScale">1</mx:Number>
	
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.events.DataGridEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.Fault;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.data.IPrimitiveColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.StageUtils;
			import weave.core.weave_internal;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.AttributeColumns.KeyColumn;
			import weave.data.AttributeColumns.SecondaryKeyNumColumn;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.KeySet;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.CustomContextMenuManager;
			import weave.ui.CustomDataGrid.WeaveDataGridImageColumn;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.NumberUtils;
			import weave.utils.ProbeTextUtils;
			use namespace mx_internal;
			
			override protected function constructor():void
			{
				super.constructor();

				_columnCheckList = new Dictionary();
				getCallbackCollection(keySet).addGroupedCallback(this, handleKeySetChange);
				getCallbackCollection(_selection).addGroupedCallback(this, handleGlobalSelectionChange);
				getCallbackCollection(_subset).addGroupedCallback(this, handleSubsetChange);
				Weave.properties.axisFontSize.addGroupedCallback(this, handleFontChange, true);

				registerLinkableChild(this, columns);
				
				var probeHeaderColumns:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
				var probedColumns:Array = ProbeTextUtils.probedColumns.getObjects();
				var allColumns:Array = (probeHeaderColumns.concat as Function).apply(null, probedColumns);
				for (var i:int = 0; i < allColumns.length; i++)
				{
					var dynamicColumn:DynamicColumn = columns.requestObject(null, DynamicColumn, false);
					var probedColumn:ILinkableObject = allColumns[i] as ILinkableObject;
					if (probedColumn is DynamicColumn)
						copySessionState(probedColumn, dynamicColumn);
					else
						dynamicColumn.requestLocalObjectCopy(probedColumn);
				}
			}
			
			public const filterByKeyType:LinkableString = newLinkableChild(this,LinkableString,updateKeyTypeComboBox,true);
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(showControls, showControlsCheckBox, "selected");
				
				columns.addGroupedCallback(this, handleColumnsChange, true);
				columns.childListCallbacks.addGroupedCallback(this, handleColumnListChange, true);
				
				dataRowKeys.filterFunction = filterKeys;
				dataRowKeys.refresh();
				handleGlobalSelectionChange();
				dimensionsList.hashMap = columns;
				
				sortFieldIndex.addGroupedCallback(this,sortCallback);
				sortInDescendingOrder.addGroupedCallback(this,sortCallback);
				columns.addGroupedCallback(this, function():void{ sortCallback(true); });

				dataGrid.addEventListener(DataGridEvent.COLUMN_STRETCH, handleStretch);
				addEventListener(ResizeEvent.RESIZE, handleResize);
				
				enableContextMenuItems(false);
			}
			public static function createContextMenuItems(destination:Object):void
			{
				// create the export CSV context menu item and disable it
				var application:Application = destination as Application;
				var applicationContextMenu:ContextMenu = application.contextMenu;
				_exportCSVContextMenuItem = CustomContextMenuManager.createAndAddMenuItemToDestination('Export CSV', application, staticExportCSV, '5 DataTable');
				applicationContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, toggleContextMenuItems);
			}
			private static var _exportCSVContextMenuItem:ContextMenuItem = null;
			private static function staticExportCSV(... args):void
			{
				var tool:DataTableTool = DraggablePanel.activePanel as DataTableTool;
				if (tool)
					tool.exportCSV();
			}
			private function handleResize(event:ResizeEvent):void
			{
				callLater(handleSessionedWidthChange);
			}
			private function handleStretch(event:Event):void
			{
				callLater(handleNewWidth, [NaN, false]);
			}
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
					title = "Data Table";
			}
			
			private function handleFontChange():void
			{
				if (!dataGrid)
					return callLater(handleFontChange);
				dataGrid.setStyle("fontSize", Weave.properties.axisFontSize.value);
			}
			
			private var attColumns:Array;
			
			public const exportKeys:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const showControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateControls);
			private function updateControls():void
			{
				if (!parent)
					return callLater(updateControls);
				try
				{
					if (showControls.value)
					{
						if (tableArea != topControls.parent)
							tableArea.addChildAt(topControls, 0);
						if (tableArea != bottomControls.parent)
							tableArea.addChild(bottomControls);
					}
					else
					{
						if (tableArea == topControls.parent)
							tableArea.removeChild(topControls);
						if (tableArea == bottomControls.parent)
							tableArea.removeChild(bottomControls);
					}
				}
				catch (e:Error) 
				{
				}
			}
			
			[Bindable]
			private var dataRowKeys:ArrayCollection = new ArrayCollection([]);
			
			private var fr:FileReference = new FileReference();	// CSV download file reference
			
			public const columns:LinkableHashMap = new LinkableHashMap(IAttributeColumn);
			public const columnWidths:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(LinkableString), handleSessionedWidthChange, false);
			private function addImageColumn():void
			{
				var imageColumnName:String = dimensionsList.hashMap.generateUniqueName("ImageColumn");
				var imageCol:ImageColumn = dimensionsList.hashMap.requestObject(imageColumnName,ImageColumn, false);
				
				AttributeSelectorPanel.openDefaultSelector(imageCol);
			}
			
			private function exportCSV():void
			{
				try
				{
					fr.save(generateTableCSV(), "Weave Data Export.csv");
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function handleDoubleClick(event:Event):void
			{
				handleItemSelection(event);
			}
			
			public const sortFieldIndex:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const sortInDescendingOrder:LinkableBoolean = newLinkableChild(this,LinkableBoolean);
			private var headerClicked:Boolean = false;
			private function handleHeaderRelease(event:DataGridEvent=null):void
			{
				if (event!=null)
				{
					var c:DataGridColumn = dataGrid.columns[event.columnIndex];
					// we do a callLater to get the correct sorting order. 
					// There is a bug in flex because of which the c.sortDescending will always return false
					callLater(getOrder,[c,event.columnIndex]);
				}
			}
			
			private function getOrder(column:DataGridColumn,index:int):void
			{
				sortInDescendingOrder.value = column.sortDescending;
				sortFieldIndex.value = index;
			}
			
			
			private function sortCallback(forced:Boolean = false):void
			{
				if(isNaN(sortFieldIndex.value))
					return;

				var c:DataGridColumn = dataGrid.columns[sortFieldIndex.value];
				if(c == null)
					return;

				// sort by the column specified in the session state
				if (forced || dataGrid.sortIndex != sortFieldIndex.value)
				{
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));
				}
				// flip the sorting order if it is wrong
				if (c.sortDescending != sortInDescendingOrder.value)
				{
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));	
				}
			}
			
			//we need to do this to set the arrow to the correct column
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
//				sortCallback();
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
			private function handleDataSourceChange():void
			{
				if (!parent)
					return callLater(handleDataSourceChange);
				try {
					dataGrid.columns = [];
					_currentDataGridColumns = [];

					// add the items to the data grid
					var attrColumns:Array = columns.getObjects();
					for each (var attrColumn:IAttributeColumn in attrColumns)
					{
						addItem(attrColumn);
					}
					
					// remove values which lack associated columns
					var _sessionedWidthNames:Array = columnWidths.getNames();
					for each (var name:String in _sessionedWidthNames)
					{
						if (!columns.getObject(name))
							columnWidths.removeObject(name);
					}
					handleSessionedWidthChange(); // run the callback for the sessionedWidths
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			
			private var _selection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			private function handleItemSelection(event:Event=null):void
			{
				dataGrid.validateNow();

				var selectedKeys:Array = new Array();
				
				for(var i:int = 0; i < dataGrid.selectedIndices.length; i++)
				{
					selectedKeys[i] = (dataGrid.dataProvider as ArrayCollection).getItemAt( dataGrid.selectedIndices[i] ).key;
				}
				
				_selection.replaceKeys(selectedKeys);
			}
			
			private function handleColumnReorder(event:Event):void
			{
				var newColumnOrder:Array = [];
				
				for(var i:int = 0; i<dataGrid.columns.length; i++)
				{
					var currAttrColumn:WeaveDataGridImageColumn = dataGrid.columns[i] as WeaveDataGridImageColumn;
					var columnName:String = columns.getName(currAttrColumn.attrColumn as ILinkableObject);
					newColumnOrder.push(columnName);
				}
				
				columns.setNameOrder(newColumnOrder);	
			}
			
			private function handleGlobalSelectionChange():void
			{
				if (!parent)
					return callLater(handleGlobalSelectionChange);
				
				//dataGrid.selectedItems = [];
				var selectedItems:Array = [];
				for each (var item:Object in dataGrid.dataProvider)
				{
					if(_selection.containsKey(item.key))
						selectedItems.push(item);
				}
				dataGrid.selectedItems = selectedItems;
			}
			
			private var _subset:KeyFilter = Weave.root.getObject(Weave.DEFAULT_SUBSET_KEYFILTER) as KeyFilter;
			private function handleSubsetChange():void
			{
				dataRowKeys.refresh();
			}
			
			private function filterKeys(item:Object):Boolean
			{
				if(_subset.containsKey(item.key))
					return true;
				else 
					return false;
			}
			
			private function moveSelectedToTop():void
			{
				//push selected Objects into an Array
				var selectedItems:Array = dataGrid.selectedItems;
				
				//datagrid.selectedItems returns null. So have to loop through indices to get the items
				(dataGrid.dataProvider as ArrayCollection).sort = null;
				
				
				for each(var item:Object in selectedItems)
				{
					var index:int = dataRowKeys.getItemIndex(item);
					dataRowKeys.removeItemAt(index);
					dataRowKeys.source.unshift(item);
				}
				
				dataRowKeys.refresh();
				//dataGrid.lockedRowCount = selectedItems.length;
				dataGrid.validateNow();
				handleGlobalSelectionChange();
				dataGrid.scrollToIndex(0);
			}
			
			private var keySet:KeySet = new KeySet();
			private function handleKeySetChange():void
			{
				updateDataRowKeys();
			}
			private function handleKeyTypeChange():void
			{
				for each (var col:WeaveDataGridImageColumn in dataGrid.columns)
				{
					if(keyTypeCombo.selectedItem == "Show All" || (col.attrColumn is KeyColumn) || (ColumnUtils.getKeyType(col.attrColumn) == keyTypeCombo.selectedItem))
						col.visible = true;
					else 
						col.visible = false;
				}
				
				updateKeys();
				updateDataRowKeys();
				
			}
			
			private function keyTypeChangeEventHandler():void
			{
				filterByKeyType.value = keyTypeCombo.selectedItem as String;
				handleKeyTypeChange();
			}
			
			private function updateKeyTypeComboBox():void
			{
				if (keyTypeCombo == null)
					return callLater(updateKeyTypeComboBox);
				
				var prevIndex:int = keyTypeCombo.selectedIndex;
				var keyTypeList:Array = new Array();
				keyTypeList.push("Show All");
				for each (var attrCol:IAttributeColumn in columns.getObjects())
				{
					if(attrCol is KeyColumn)
						continue;
					
					var keyType:String = ColumnUtils.getKeyType(attrCol);
					
					if(keyType == null)
						keyType = "null"
					if(keyTypeList.indexOf(keyType) == -1)
						keyTypeList.push(keyType);
				}
				keyTypeCombo.dataProvider = keyTypeList;
				
				keyTypeCombo.selectedItem = filterByKeyType.value || 'Show All';
				
				//keyTypeCombo.selectedIndex = selectedIndex;
			}
			
			private function getExportDataProvider():*
			{
				for each (var column:IAttributeColumn in columns.getObjects())
				{
					while (!(column is IPrimitiveColumn) && column is IColumnWrapper)
						column = (column as IColumnWrapper).internalColumn;
					
					if (column is SecondaryKeyNumColumn)
					{
						// dimension slider hack -- relies on previously set SecondaryKeyNumColumn.allKeysHack = true;
						var key:IQualifiedKey;
						var keyLookup:Dictionary = new Dictionary(true);
						for each (column in columns.getObjects())
							for each (key in column.keys)
								keyLookup[key] = true;
						var keys:Array = [];
						for (var keyObj:* in keyLookup)
							keys.push({key: keyObj});
						return keys;
					}
				}
				return dataGrid.dataProvider;
			}
			
			private function generateTableCSV():String
			{
				SecondaryKeyNumColumn.allKeysHack = true; // dimension slider hack
				
				var records:Array = [];
				
				// get the list of column titles
				var attrCols:Array = columns.getObjects();
				var columnTitles:Array = [];
				var i:int;
				for (i = 0; i < attrCols.length; i++)
					columnTitles.push(ColumnUtils.getTitle(attrCols[i]));
				var keyTypeMap:Object = {};
				
				// create the data for each column in each selected row
				var keys:* = getExportDataProvider();
				for each (var item:Object in keys)
				{
					var key:IQualifiedKey = item.key as IQualifiedKey;
					var record:Object = {};
					// each record has a property named after the keyType equal to the key value
					if (exportKeys.value)
					{
						record[key.keyType] = key.localName;
						keyTypeMap[key.keyType] = true;
					}
					// each record has a property named after the column title equal to the value in that column for the current key
					var dataType:Class = (keys === dataGrid.dataProvider) ? null : String; // dimension slider hack
					for (i = 0; i < attrCols.length; i++)
						record[columnTitles[i]] = (attrCols[i] as IAttributeColumn).getValueFromKey(key, dataType);
					records.push(record);
				}
				
				// update the list of headers before generating the table
				for (var keyType:String in keyTypeMap)
					columnTitles.unshift(keyType);

				SecondaryKeyNumColumn.allKeysHack = false; // dimension slider hack
				
				var rows:Array = WeaveAPI.CSVParser.convertRecordsToRows(records, columnTitles);
				return WeaveAPI.CSVParser.createCSVFromArrays(rows);
			}
			
			private function handleDataCopy(event:Event):void
			{				
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, generateTableCSV());
			}
			
			private var attColCodes:Array = [];
			
			private var _minSuggestedColumnSize:int = 100;
			
			private var _visibleColumns:Array = new Array();;
			private var _columnCheckList:Dictionary = null;
			
			private function updateDataRowKeys():void
			{
				var keyObjects:Array = [];
				for each (var key:IQualifiedKey in keySet.keys)
				{
					keyObjects.push({key: key});
				}
				dataRowKeys.source = keyObjects;
			}			
			
			private function handleColumnsChange():void
			{
				updateKeys();
				updateKeyTypeComboBox();
				handleDataSourceChange();
				handleKeyTypeChange();
				handleGlobalSelectionChange();
				
				//we need to do this to set the arrow to the correct column
				this.invalidateDisplayList();
				updateBorders();
			}
			
			private function handleColumnListChange():void
			{
				showKeyColumnCheckBox.selected = columns.getNames(KeyColumn).length > 0;
			}
			
			private function updateKeys():void
			{
				keySet.clearKeys();
				for each (var column:IAttributeColumn in columns.getObjects())
				{	
					if(keyTypeCombo.enabled)
					{
						if(keyTypeCombo.selectedItem == "Show All" || ColumnUtils.getKeyType(column) == keyTypeCombo.selectedItem)
							keySet.addKeys(column.keys);
					}
					else
						keySet.addKeys(column.keys);
				}
			}
			[Bindable]
			private var _currentDataGridColumns:Array = [];
			
			
			
			private function handleNewWidth(newWidth:Number, allowCallLater:Boolean = true):void
			{
				// if this was called from the callbacks of columnWidths, return
				// (this means this function already ran)
				if (getCallbackCollection(columnWidths).callbacksWereTriggered)
					return;
				
				// delay this function to let the flex component update correctly.
				if (allowCallLater)
				{
					StageUtils.callLater(this, handleNewWidth, [newWidth, false], false);
					return;
				}
				
				// go through each column and set the sessioned widths
				var i:int;
				var totalWidth:Number = dataGrid.width;
				for (i = 0; i < _currentDataGridColumns.length; ++i)
				{
					var dgc:WeaveDataGridImageColumn = _currentDataGridColumns[i];
					var column:IAttributeColumn = dgc.attrColumn;
					var columnName:String = columns.getName(column);
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					var width:Number = (_currentDataGridColumns[i] as WeaveDataGridImageColumn).width;
					if (isNaN(width) || width <= 5) // this happens when a column is stretched all the way to the right
						width = _minSuggestedColumnSize;
					_guiWidthChanged = true; // don't let the next line run callbacks
					sessionedWidth.value = Math.floor(100 * width / totalWidth) + "%";
					_guiWidthChanged = false; 
				}
			}
			private function handleSessionedWidthChange():void
			{
				// return if this function was called from the above function
				if (_guiWidthChanged)
					return;

				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0)
				{
					callLater(handleSessionedWidthChange);
					return;
				}
				
				// loop through the data and put them into the data grid
				var totalWidth:Number = dataGrid.width - dataGrid.getScrollWidth(CustomDataGrid.VERTICAL_SCROLL);
				for (var j:int = 0; j < _currentDataGridColumns.length - 1; ++j)
				{
					var dgc:WeaveDataGridImageColumn = _currentDataGridColumns[j] as WeaveDataGridImageColumn;
					var columnName:String = columns.getName(dgc.attrColumn);
					if (columnName == null)
						continue;
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					// we don't want to create a sessionedWidth because one will be created later if the column wasn't disposed
					if (sessionedWidth == null)
						continue; 
					var temp:Number;
					if (sessionedWidth.value)
						temp =  NumberUtils.getNumberFromNumberOrPercent(sessionedWidth.value, totalWidth);
					else
						temp = totalWidth / _currentDataGridColumns.length - 1;

					if (temp <= 5 || isNaN(temp)) 
						temp = _minSuggestedColumnSize;
					
					// always force the width to be the new value
					var newWidth:int = Math.floor(Math.min(temp, totalWidth - 1));
					dgc.setWidth(newWidth);
					dgc.width = newWidth;
					
					// now we force it into doing the proper resizing (if any)
					dgc.width = dgc.width;
				}
//				dataGrid.invalidateDisplayList();
				dataGrid.validateSize(true);
			}
			private var _guiWidthChanged:Boolean = false; 
			
			public function addItem(attrColumn:IAttributeColumn):void
			{				
				var dgc:WeaveDataGridImageColumn = new WeaveDataGridImageColumn(attrColumn);
				_currentDataGridColumns.push(dgc);
				var columnName:String = columns.getName(attrColumn);
				var sessionedWidth:LinkableString = columnWidths.requestObject(columnName, LinkableString, true);

				validateHScrollBar();
				
				dataGrid.columns = _currentDataGridColumns;
				dataGrid.invalidateDisplayList();
			}
			
			private function validateHScrollBar():void
			{
				// NEED TO DETERMINE WHETHER OR NOT TO SHOW A SCROLL BAR -- if not, it will resize each column automatically
				var totalColumnWidths:Number = 0;
				for each (var obj:WeaveDataGridImageColumn in _currentDataGridColumns)
				{
					totalColumnWidths += obj.width;
				}
				if (totalColumnWidths < dataGrid.width) 
					dataGrid.horizontalScrollPolicy = "off";
				else
					dataGrid.horizontalScrollPolicy = "off";
			}
			
			private function indexOfAttributeColumnAdded(attrCol:IAttributeColumn):int
			{
				// TODO: O(n) lookups are bad. These should be indexed in a dictionary...
				for(var i:int = 0; i < _currentDataGridColumns.length; i++)
				{
					if(_currentDataGridColumns[i].attrColumn == attrCol)
						return i;
				}
				return -1;
			}
			
			private function handleKeyColumnCheckBox():void
			{
				if(showKeyColumnCheckBox.selected)
				{
					var kc:Array= columns.getObjects(KeyColumn);
					if(kc.length == 0)
					{
						var nameOrder:Array = columns.getNames();
						columns.requestObject("KeyColumn",KeyColumn, false);
						columns.setNameOrder(nameOrder);
					}
					
					updateKeyTypeComboBox();
				}
				else
				{
					var keyCols:Array = columns.getNames(KeyColumn);
					for each(var keyCol:String in keyCols)
					{
						columns.removeObject(keyCol);
					}
				}
			}
			
			public const lockedColumns:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleLockedColumnChange, true);
			private function handleLockedColumnChange():void
			{
				if (lockedColumns.value < 0 || lockedColumns.value > dataGrid.columns.length)
					lockedColumns.value = 0;
				dataGrid.lockedColumnCount = lockedColumns.value;
			}

			private static function enableContextMenuItems(newValue:Boolean):void
			{
				// when loading this from the session state, this is called before the context menu is setup
				if (!_exportCSVContextMenuItem)
					return;
				
				_exportCSVContextMenuItem.enabled = newValue;
				_exportCSVContextMenuItem.visible = newValue;
				_exportCSVContextMenuItem.separatorBefore = newValue;
			}
			
			protected static function toggleContextMenuItems(event:Event):void
			{
				enableContextMenuItems(DraggablePanel.activePanel is DataTableTool);
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Data Table">
			<ui:ColumnListComponent id="dimensionsList"  backgroundAlpha="0.7" height="100%" width="100%" label="Columns"/>
			<mx:Button label="Add Image Column" click="addImageColumn()" />
			<mx:CheckBox id="showControlsCheckBox" label="Show controls on panel"/>
			<mx:CheckBox change="handleKeyColumnCheckBox()" id="showKeyColumnCheckBox" label="Show Key Column"/>
			<mx:CheckBox label="Export keys with data" creationComplete="linkBindableProperty(exportKeys, event.target, 'selected');"/>
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:HBox>
				<mx:Label text="Number of Locked Columns"/>
				<mx:NumericStepper id="numLockedColumns" minimum="0" maximum="{dataGrid.columns.length}" 
								   creationComplete="linkBindableProperty(lockedColumns, event.target, 'value');"/>	
			</mx:HBox>			
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ui:ControlPanel>
</ui:DraggablePanel>
