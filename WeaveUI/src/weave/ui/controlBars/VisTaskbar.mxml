<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->


<!-- 	VisTaskbar
		This class creates a taskbar that sits at the bottom of a page to provide objects to access different options.  For example, tools could be
		minimized to go into this taskbar like in windows or a mac.  
-->
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" 
			  width="100%"
			  horizontalAlign="center"
			  verticalScrollPolicy="off"
			  horizontalScrollBarStyleName="scroll-style"
			  verticalScrollBarStyleName="scroll-style"
			  bottom="0"
			  implements="weave.api.core.ILinkableObject"
			  >
	<mx:HBox id="minimizeBox"
			 horizontalAlign="center"
			 cornerRadius="5"
			
			 backgroundColor="0x808080" backgroundAlpha="0.8"
			 
			
			 borderColor="0x000000" borderStyle="solid" borderThickness="1" 
			 paddingLeft="10" paddingRight="10" paddingTop="2" paddingBottom="1"
			 
			 filters="{[glow]}"
			 />
	
	<mx:Script>
		<![CDATA[
			import flash.net.getClassByAlias;
			import flash.net.registerClassAlias;
			import flash.utils.describeType;
			
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.core.BitmapAsset;
			import mx.core.UIComponent;
			import mx.effects.Glow;
			import mx.effects.Move;
			import mx.effects.Parallel;
			import mx.effects.Resize;
			import mx.events.MoveEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.UIDUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.newLinkableChild;
			import weave.api.reportError;
			import weave.core.ErrorManager;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.SessionManager;
			import weave.primitives.ImageFactory;
			import weave.ui.DraggablePanel;
			import weave.ui.MinimizedComponent;
			import weave.utils.BitmapUtils;

			[Bindable]
			private var glow:GlowFilter = new GlowFilter(0xFFFFFF, 0.5, 3, 3, 5);
			
			private static var _instance:VisTaskbar = null;
			public static function get instance():VisTaskbar
			{
				if (_instance == null)
				{
					_instance = new VisTaskbar();
					_instance.initialize();
				}
				return _instance;
			}
			
			public const taskbarShrinkGrow:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
			public const taskbarLargeIconSize:LinkableNumber = newLinkableChild(this, LinkableNumber, updateIconSizes);
			public const taskbarSmallIconSize:LinkableNumber = newLinkableChild(this, LinkableNumber, shrinkComponents);
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				addEventListener(MouseEvent.ROLL_OVER, growComponents);
				addEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);
				
				taskbarShrinkGrow.value = true;
				taskbarSmallIconSize.value = 10;
				taskbarLargeIconSize.value = 50;
				
				Weave.root.childListCallbacks.addImmediateCallback(this, handleLinkableChildListChanged);
			}
			
			// add a callback for when components that these minimized components represented are removed
			private function handleLinkableChildListChanged():void
			{
				if (!minimizeBox)
					return;
					
				// go through each minimizedComponent in the taskbar
				for each(var minimizedComponent:MinimizedComponent in minimizeBox.getChildren() )
				{
					// go through each component in the minimized component group (this will have to be modified later in case we start to group
					// tools together
					for each(var component:UIComponent in minimizedComponent.componentGroup)
					{
						// if the last object removed that caused this callback is in this component group, 
						// then remove the minimized component from the taskbar so you cant restore something that doesn't exist anymore
						if(Weave.root.childListCallbacks.lastObjectRemoved == component)
						{
							minimizeBox.removeChild(minimizedComponent);
							continue;
						}
					}
				}
			}
			
			private function updateIconSizes():void
			{
				for each(var component:MinimizedComponent in minimizeBox.getChildren() )
				{
					component.scaleX = 1;
					component.scaleY = 1;
					component.validateNow();
					component.updateMinimizedIcon(taskbarLargeIconSize.value, taskbarLargeIconSize.value);
				}
				
				shrinkComponents();
			}
				
			public function shrinkComponents(event:MouseEvent = null):void
			{
				if (taskbarShrinkGrow.value == false)
					return;
					
				removeEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);				
				
				// limit the smallest size to 2 pixels, otherwise grow/shrink doesn't work
				var scale:Number = Math.max(2, taskbarSmallIconSize.value) / taskbarLargeIconSize.value;

				for each(var component:MinimizedComponent in minimizeBox.getChildren() )
				{
					component.scaleX = scale;
					component.scaleY = scale;
				}
				
				addEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);
			}	
			public function growComponents(event:MouseEvent = null):void
			{
				if(taskbarShrinkGrow.value == false)
					return;
				
				for each(var component:MinimizedComponent in minimizeBox.getChildren() )
				{
					component.scaleX = 1;
					component.scaleY = 1;
				}
			}
			
			public function addMinimizedComponent(component:UIComponent, restoreFunction:Function=null):MinimizedComponent
			{
				var minimizedComponent:MinimizedComponent = new MinimizedComponent(
					[component],
					taskbarLargeIconSize.value,
					taskbarLargeIconSize.value,
					function():void
					{
						if (restoreFunction != null)
							restoreFunction();
						else
							component.visible = true;
					}
				);
				minimizedComponent.addEventListener(
					MouseEvent.CLICK,
					function (e:Event):void { minimizedComponent.restoreFunction() }
				);
				
				minimizeBox.addChild(minimizedComponent);
				minimizeBox.validateNow();
				validateNow();
				
				if (taskbarShrinkGrow.value)
					shrinkComponents();
				
				return minimizedComponent;
			}
			
			public function removeMinimizedComponent(minimizedComponent:MinimizedComponent):void
			{
				try
				{
					if (minimizeBox == minimizedComponent.parent)
						minimizeBox.removeChild(minimizedComponent);
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			public function cleanMinimizedComponentImage(minimizedComponent:MinimizedComponent):void
			{
				try
				{
					minimizedComponent.graphics.clear();
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			
			public function getMinimizedComponentXYRelativeToStage(minimizedComponent:MinimizedComponent):Point
			{
				if (minimizeBox != minimizedComponent.parent)
					return null;

				var childIndex:int = minimizeBox.getChildIndex(minimizedComponent);
				
				var parentRelativeToStage:Point = localToGlobal(new Point(minimizeBox.x, minimizeBox.y));
				
				// the x position is the parent's X + left padding + the width of each thumb before it + each horizontal gap between thumbs
				var childX:int = parentRelativeToStage.x + 
								 minimizeBox.getStyle("paddingLeft")  + 
								 childIndex * (taskbarSmallIconSize.value + minimizeBox.getStyle("horizontalGap"));
				var childY:int = parentRelativeToStage.y + 
								 minimizeBox.getStyle("paddingTop");

				return new Point(childX, childY);
			}
			
			public function addMinimizedComponentGroup(components:Array, restoreFunctions:Array):MinimizedComponent
			{	
				var minimizedComponent:MinimizedComponent 
							= new MinimizedComponent(components, 
													 taskbarLargeIconSize.value, 
													 taskbarLargeIconSize.value, 
													 // the restore function for this minimized component iterates over all components in the 
													 // group and restores them all
													 function ():void {												 	
												   		for(var i:int = 0; i < components.length; i++)
														{
															try {
																restoreFunctions[i]();
															} 
															catch(error:Error) {
																components[i].visible = true;
															}
														}
												   	});
												   	
				minimizedComponent.addEventListener(MouseEvent.CLICK, function(e:Event):void { minimizedComponent.restoreFunction() } );
						
				minimizeBox.addChild(minimizedComponent);
				minimizeBox.validateNow();
				validateNow();
				
				if(taskbarShrinkGrow.value)
					shrinkComponents();
								
				return minimizedComponent;
			}
			
			public function restoreAllComponents():void
			{
				
				
				//try {
					for each(var component:MinimizedComponent in minimizeBox.getChildren() )
					{
						component.dispatchEvent(new MouseEvent(MouseEvent.CLICK));//restoreFunction();
					}
				//} catch(error:Error) {}
			}
		]]>
	</mx:Script>
</mx:Box>
