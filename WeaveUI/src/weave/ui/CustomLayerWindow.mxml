<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This component enlists custom layers available 
	@author kmanohar
-->
<DraggablePanel xmlns="weave.ui.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml" title="Add a new layer"
				creationPolicy="all"
				backgroundColor="0xcccccc"
				percentWidth="NaN" percentHeight="NaN"
				sessionPanelCoordsAsPercentages="false"
				layout="vertical">
	<mx:VBox borderStyle="solid"
			 paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5"
			 backgroundAlpha="0.8" backgroundColor="white"
			 width="100%" height="100%">
		
		<mx:List id="layerSelector" width="100%" height="100%" minWidth="250">
			<!-- For now, add new plotter editors here. later, there will be a way of listing them automatically. -->
			
			<!--<mx:Object label="Bars" plotterClass="{CompoundBarChartPlotter}" layerClass="{SelectablePlotLayer}"/>-->
			<mx:Object label="Grid lines" plotterClass="{GridLinePlotter}" layerClass="{PlotLayer}"/>
			<mx:Object label="Labels" plotterClass="{AxisLabelPlotter}" layerClass="{PlotLayer}"/>
		</mx:List>
	
		<mx:Button label="Add new layer" right="0" click="openControls()" enabled="{layerSelector.selectedItem != null}"/>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import weave.api.disposeObjects;
			import weave.api.registerDisposableChild;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.ui.IPlotLayer;
			import weave.api.ui.IPlotter;
			import weave.ui.customLayerSettings.AxisLabelLayerControls;
			import weave.ui.customLayerSettings.CompoundBarChartSettings;
			import weave.ui.customLayerSettings.GridLineLayerControls;
			import weave.utils.EditorManager;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.AxisLabelPlotter;
			import weave.visualization.plotters.CompoundBarChartPlotter;
			import weave.visualization.plotters.DynamicPlotter;
			import weave.visualization.plotters.GridLinePlotter;
			import weave.visualization.tools.SimpleVisTool;
			
			{
				// For now, register all plotter editors here.
				
				//EditorManager.registerEditor(CompoundBarChartPlotter, CompoundBarChartSettings);
				EditorManager.registerEditor(GridLinePlotter, GridLineLayerControls);
				EditorManager.registerEditor(AxisLabelPlotter, AxisLabelLayerControls);
			}

			private var _tool:SimpleVisTool = null;
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			public function set targetTool(value:SimpleVisTool):void
			{
				if (_tool != value && _tool != null)
					throw new Error("targetTool should not be set more than once");
				
				_tool = value;
			}
			
			private function openControls():void
			{
				var label:String = layerSelector.selectedItem.label;
				var Plotter:Class = layerSelector.selectedItem.plotterClass;
				var Layer:Class = layerSelector.selectedItem.layerClass;
				
				var controls:ControlPanel = new ControlPanel();
				PopUpManager.addPopUp(controls, this);
				PopUpManager.centerPopUp(controls);
				controls.targets = [_tool];

				var layer:IPlotLayer = _tool.visualization.layers.requestObject(label, Layer, false) as IPlotLayer;
				var plotter:IPlotter = null;
				if (layer)
					plotter = (layer.plotter as DynamicPlotter).requestLocalObject(Plotter, true) as IPlotter;
				if (!plotter)
				{
					controls.revert();
					disposeObjects(controls);
					return;
				}
				registerDisposableChild(plotter, controls); // when the plotter goes away, make the control panel go away
				
				// add editor component to layercontrols
				var editor:ILinkableObjectEditor = EditorManager.getNewEditor(plotter);
				if (editor)
				{
					controls.tabNavigator.addChild(editor as DisplayObject);
				}
				else
				{
					controls.removePanel();
				}
				
				removePanel();
			}
			
			
		]]>
	</mx:Script>
</DraggablePanel>
